library(plyr)
itemList <- ddply(retail,c("CustomerID","Date"),
function(df1)paste(df1$Description,
collapse = ","))
View(itemList)
itemList$CustomerID <- NULL
itemList$Date <- NULL
colnames(itemList) <- c("items")
View(itemList)
write.csv(itemList,"market_basket.csv", quote = FALSE, row.names = TRUE)
print('Description of the transactions')
tr <- read.transactions('market_analysis.tsv', format = 'basket', sep='\t')
summary(tr)
tr <- read.transactions('market_basket.csv', format = 'basket', sep='\t')
tr <- read.transactions('market_basket.csv', format = 'basket', sep=',')
summary(tr)
tf
tr
tr <- read.transactions('market_basket.csv', format = 'basket', sep=',')
tr <- read.transactions('market_basket.csv', format = 'single', sep=',')
?read.transactions
read <- read.csv("market_basket.csv", quote = "", fill = TRUE, header = TRUE,  sep = ",", encoding = "UTF8")
read <- read.csv("market_basket.csv", quote = "", fill = TRUE, header = TRUE,  sep = ",", encoding = "UTF8", col.names = FALSE)
read <- read.csv("market_basket.csv", quote = "", fill = TRUE, header = FALSE, skip = 1,  sep = ",", encoding = "UTF8", col.names = FALSE)
?read.csv
read <- read.csv("market_basket.csv")
read <- read.csv("market_basket.csv", sep = ",")
read <- read.csv("market_basket.csv", sep = ",", stringsAsFactors = FALSe)
read <- read.csv("market_basket.csv", sep = ",", stringsAsFactors = FALSE)
read <- read.csv("market_basket.csv", skip = 1)
retail <- retail %>% mutate(Description = as.factor(Description))
length(unique(retail$Description))
retail <- read_excel('Online retail.xlsx')
retail <- retail[complete.cases(retail), ]
retail <- retail %>% mutate(Description = as.factor(Description))
retail <- retail %>% mutate(Country = as.factor(Country))
retail$Date <- as.Date(retail$InvoiceDate)
retail$Time <- format(retail$InvoiceDate,"%H:%M:%S")
length(unique(retail$Description))
retail <- read.csv("Online Retail.csv")
View(retail)
retail <- select(retail, c("InvoiceNo", "Description", "CustomerID"))
View(retail)
?aggregate
back <- retail
retail <- retail[complete.cases(retail), ]
back <- retail
retail <- select(retail, c("InvoiceNo", "CustomerID"))
View(retail)
retail <- back
retail <- select(retail, c("InvoiceNo", "Description"))
View(retail)
write.csv(retail, "retailMod.csv")
itemList <- ddply(retail,c("CustomerID","Date"),
function(df1)paste(df1$Description,
collapse = ","
)
)
itemList <- ddply(retail,c("InvoiceNo"),
function(df1)paste(df1$Description,
collapse = ","))
View(itemList)
write.csv(itemList, "fdp.csv")
table(itemList)
hey <- read.transactions("fdp.csv", format = "basket", sep = ",")
summary(hey)
rm(hey)
itemList <- select(itemList, -InvoiceNo)
write.csv(itemList, "fdp.csv")
hey <- read.transactions("fdp.csv", format = "basket", sep = ",")
summary(hey)
rm(hey)
write.csv(itemList, "fdp.csv", quote = FALSE)
hey <- read.transactions("fdp.csv", format = "basket", sep = ",")
summary(hey)
write.csv(itemList, "fdp.csv", quote = FALSE, row.names = FALSE)
hey <- read.transactions("fdp.csv", format = "basket", sep = ",")
warnings()
summary(hey)
itemFrequencyPlot(tr, topN=20, type='absolute')
itemFrequencyPlot(hey, topN=20, type='absolute')
tr <- hey
rm(hey)
retail <- retail[complete.cases(retail), ]
retail <- select(retail, "Description")
View(retail)
retail <- select(retail, c("InvoiceNo", "Description"))
View(retail)
retail <- read_excel('Online retail.xlsx')
retail <- retail[complete.cases(retail), ]
retail <- select(retail, c("InvoiceNo", "Description"))
View(retail)
tr
rules <- apriori(tr, parameter = list(supp=0.001, conf=0.8))
rules <- sort(rules, by='confidence', decreasing = TRUE)
summary(rules)
inspect(rules[1:10])
topRules <- rules[1:10]
plot(topRules)
plot(topRules, method="graph")
plot(topRules, method = "grouped")
View(itemList)
write.csv(itemList, "onRetail.csv", quote = FALSE, row.names = FALSE)
ola <- read.transactions("onRetail.csv", format = "basket", sep = ",")
summary(ola)
itemFrequencyPlot(tr, topN=20, type='absolute')
itemFrequencyPlot(tr, topN=20, type='absolute')
rules <- apriori(tr, parameter = list(supp=0.001, conf=0.8))
rules <- sort(rules, by='confidence', decreasing = TRUE)
summary(rules)
inspect(rules[1:10])
topRules <- rules[1:10]
plot(topRules)
plot(topRules, method="graph")
plot(topRules, method = "grouped")
rules <- apriori(tr, parameter = list(supp=0.001, conf=0.9))
retail %>%
group_by(InvoiceNo) %>%
summarize(n_items = mean(Quantity)) %>%
ggplot(aes(x=n_items))+
geom_histogram(fill="indianred", bins = 100000) +
geom_rug()+
coord_cartesian(xlim=c(0,80))
retail <- read_excel('Online retail.xlsx')
retail <- retail[complete.cases(retail), ]
retail <- retail %>% mutate(Description = as.factor(Description))
retail <- retail %>% mutate(Country = as.factor(Country))
retail$Date <- as.Date(retail$InvoiceDate)
retail$Time <- format(retail$InvoiceDate,"%H:%M:%S")
glimpse(retail)
str(retail)
retail$Time <- as.factor(retail$Time)
a <- hms(as.character(retail$Time))
retail$Time = hour(a)
retail %>%
ggplot(aes(x=Time)) +
geom_histogram(stat="count",fill="indianred")
detach("package:plyr", unload=TRUE)
detach("package:plyr", unload=TRUE)
detach("package:plyr", unload=TRUE)
retail %>%
group_by(InvoiceNo) %>%
summarize(n_items = mean(Quantity)) %>%
ggplot(aes(x=n_items))+
geom_histogram(fill="indianred", bins = 100000) +
geom_rug()+
coord_cartesian(xlim=c(0,80))
retail %>%
group_by(InvoiceNo) %>%
summarize(n_items = mean(Quantity)) %>%
ggplot(aes(x=n_items))+
geom_histogram(fill="steelblue3", bins = 100000) +
geom_rug()+
coord_cartesian(xlim=c(1,80))
retail %>%
group_by(InvoiceNo) %>%
summarize(n_items = mean(Quantity)) %>%
ggplot(aes(x=n_items))+
geom_histogram(fill="steelblue3", bins = 100000) +
geom_rug()+
# coord_cartesian(xlim=c(1,80))
)
retail %>%
group_by(InvoiceNo) %>%
summarize(n_items = mean(Quantity)) %>%
ggplot(aes(x=n_items))+
geom_histogram(fill="steelblue3", bins = 100000) +
geom_rug())
retail %>%
group_by(InvoiceNo) %>%
summarize(n_items = mean(Quantity)) %>%
ggplot(aes(x=n_items))+
geom_histogram(fill="steelblue3", bins = 100000) +
geom_rug()
coord_cartesian(xlim=c(0,80))
retail %>%
group_by(InvoiceNo) %>%
summarize(n_items = mean(Quantity)) %>%
ggplot(aes(x=n_items))+
geom_histogram(fill="steelblue3", bins = 100000) +
geom_rug()
retail %>%
group_by(InvoiceNo) %>%
summarize(n_items = mean(Quantity)) %>%
ggplot(aes(x=n_items))+
geom_histogram(fill="steelblue3", bins = 100000) +
geom_rug() +
coord_cartesian(xlim=c(0,80))
itemFrequencyPlot(tr, topN = 20, cex.names = .5)
itemFrequencyPlot(tr, topN = 30, cex.names = .5)
itemFrequencyPlot(tr, topN = 15, cex.names = .5)
itemFrequencyPlot(tr, topN = 15)
itemFrequencyPlot(tr, topN = 15, cex.names = .8)
itemFrequencyPlot(tr, topN = 15, cex.names = .7)
itemFrequencyPlot(tr, topN = 15, cex.names = .6)
ggplot(retail) +
geom_bar(aes(x = Countryu))
ggplot(retail) +
geom_bar(aes(x = Country))
ggplot(retail) + geom_line(aes(x = Country), stat = "count")
ggplot(retail) + geom_line(aes(x = Country), stat = "count", group_by = "Country")
ggplot(retail) + geom_line(aes(x = Country, group= Country), stat = "count")
ggplot(retail) + geom_boxplot(aes(x = Country))
ggplot(retail) + geom_boxplot(aes(x = Country), stat = "count")
ggplot(retail) + geom_bar(aes(x = Date))
ggplot(retail) + geom_bar(aes(x = Time))
count(retail, by = Country)
sort(count(retail, by = Country))
tbl <- crossTable(tr, sort=TRUE)
tbl
crossTable(tr, measure='lift',sort=T)[1:5,1:5]
itemsets <- apriori(tr, parameter = list(support = 0.001,))
itemsets <- apriori(tr, parameter = list(support = 0.001,
minlen =2,
target = 'frequent'))
summary(itemsets)
itemsets <- apriori(tr, parameter = list(support = 0.01,
minlen =2,
target = 'frequent'))
summary(itemsets)
itemsets <- apriori(tr, parameter = list(support = 0.005,
minlen =2,
target = 'frequent'))
summary(itemsets)
quality(itemsets)$lift <- interestMeasure(itemsets, measure = 'lift', tr)
inspect(sorte(itemsets, by = 'lift', decreasing = T)[1:5])
inspect(sort(itemsets, by = 'lift', decreasing = T)[1:5])
inspect(sort(itemsets, by = 'lift', decreasing = T)[1:5])
inspect(sort(itemsets, by = 'lift', decreasing = T)[1:10])
inspect(sort(itemsets, by = 'lift', decreasing = T)[1:20])
plot(bestRules, method = "grouped")
bestRules <- rules[1:10]
plot(bestRules)
plot(bestRules, method="graph")
plot(bestRules, method = "grouped")
itemFrequencyPlot(tr, topN=20, type='absolute')
itemsets <- apriori(tr,
parameter = list(support=.001,
minlen=2,
target='frequent' # to mine for itemsets
))
summary(itemsets)
inspect(sort(itemsets, by='support', decreasing = T)[1:5])
inspect(sort(itemsets, by='support', decreasing = F)[1:5])
inspect(sort(itemsets, by='support', decreasing = T)[1:5])
inspect(sort(itemsets, by='support', decreasing = T)[1:5])
inspect(sort(itemsets, by='support', decreasing = F)[1:5])
```{r}
inspect(sort(itemsets, by='support', decreasing = T)[1:5])
inspect(sort(itemsets, by='support', decreasing = F)[1:5])
quality(itemsets)$lift <- interestMeasure(itemsets, measure='lift', Groceries)
quality(itemsets)$lift <- interestMeasure(itemsets, measure='lift', tr)
quality(itemsets)$lift <- interestMeasure(itemsets, measure='lift', tr)
inspect(sort(itemsets, by ='lift', decreasing = T)[1:5])
inspect(sort(itemsets, by ='lift', decreasing = F)[1:5])
quality(itemsets)$lift <- interestMeasure(itemsets, measure='lift', tr)
inspect(sort(itemsets, by ='lift', decreasing = T)[1:5])
inspect(sort(itemsets, by ='lift', decreasing = F)[1:5])
quality(itemsets)$lift <- interestMeasure(itemsets, measure='lift', tr)
inspect(sort(itemsets, by ='lift', decreasing = T)[1:5])
3.14!
View(retail)
View(back)
View(itemList)
colnames(itemList) <- c("items")
View(itemlist)
View(itemList)
help <- itemList
?ddply
unique(help)
help <- which(duplicated(help))
View(help)
help <- itemList
help[!duplicated(help)]
help[!duplicated(help),]
View(help)
ncol(unique(help))
duplicated(head(help))
duplicated(head(help, 5))
itemsets[1:5,]
inspect(itemsets)[1:5]
inspect(sort(itemsets, by ='lift', dddddecreasing = F)[1:5])
inspect(sort(itemsets, by ='lift', decreasing = T)[1:5])
rules <- apriori(tr, parameter = list(supp=0.001, conf=0.9))
rules <- apriori(tr, parameter = list(supp=0.005, conf=0.9))
summary(rules)
inspect(rules[1:10])
inspect(rules[1:20])
inspect(rules[1:40])
inspect(rules[1:40])
inspect(rules[:])
inspect(rules)
head(retail)
head(itemList)
itemFrequencyPlot(tr, topN=20, type='absolute')
head(retail)
head(help)
write.csv(help, "no_duplicates.csv", quote = FALSE, row.names = FALSE)
duplicates(help)
duplicate(help)
duplicated(help)
help <- help[!duplicated(help),]
duplicated(help)
write.csv(help, "no_duplicates.csv", quote = FALSE, row.names = FALSE)
help <- itemList
index <- which(duplicated(help))
index
help[-index,]
help
help <- help[-index,]
write.csv(help, "no_duplicates.csv", quote = FALSE, row.names = FALSE)
index <- which(duplicated(help))
index
write.csv(help, "no_duplicates.csv", quote = FALSE, row.names = FALSE)
help[40,:]
help[40,]
help[,40]
help[1,40]
dim(help)
itemList[40]
nrow(itemList)
nrow(help)
rm(help)
lul <- itemlist
lul <- itemList
lul <- unique(lul)
nrow(lul)
write.csv(lul, "no_duplicates.csv", quote = FALSE, row.names = FALSE)
any(duplicated(lul))
any(duplicated(itemList))
summary(rules)
?is.redundant
is.redundant(rules)
index <- which(!is.redundant(rules))
index
index <- which(is.redundant(rules))
index
lul <- rules
lul <- lul[-index,]
nrow(lul)
dim(lul)
summary(lul)
is.redundant(lul)
rules[1:60]
inspect(rules[1:60])
inspect(rules[1:60])
rules <- lul
summary(rules)
bestRules <- rules[1:10]
plot(bestRules)
rules <- sort(rules, by='confidence', decreasing = TRUE)
bestRules <- rules[1:10]
plot(bestRules)
rules[1:10]
inspect(rules[1:10])
plot(rules[1:10])
inspect(rules[1:10])
plot(rules[1:10])
plot(rules)
duplicated(lul)
duplicated(retail)
?write.transactions
lul <- itemList
lul <- unique(lul)
duplicated(lul)
which(duplicated(lul))
any(duplicated(lul))
write.csv(lul, "no_duplicates.csv", quote=FALSE)
rules
inspect(rules)
inspect(rules)
?is.redundant
summary(rules)
is.redundant(rules)
> rules.sorted = sort(rules, by="lift")
> subset.matrix = is.subset(rules.sorted, rules.sorted)
> subset.matrix[lower.tri(subset.matrix, diag=T)] = NA
> redundant = colSums(subset.matrix, na.rm=T) >= 1
> rules.sorted = sort(rules, by="lift")
> subset.matrix = is.subset(rules.sorted, rules.sorted)
> subset.matrix[lower.tri(subset.matrix, diag=T)] = NA redundant = colSums(subset.matrix, na.rm=T) >= 1
rules.sorted = sort(rules, by="lift")
subset.matrix = is.subset(rules.sorted, rules.sorted)
subset.matrix[lower.tri(subset.matrix, diag=T)] = NA
redundant = colSums(subset.matrix, na.rm=T) >= 1
rules.sorted = sort(rules, by="lift")
subset.matrix = is.subset(rules.sorted, rules.sorted)
subset.matrix[lower.tri(subset.matrix, diag=T)] <-  NA
redundant = colSums(subset.matrix, na.rm=T) >= 1
rules.pruned = rules.sorted[!redundant]
summary(rules.pruned)
> rules.sorted = sort(rules, by="lift")
> subset.matrix = is.subset(rules.sorted, rules.sorted)
> subset.matrix[lower.tri(subset.matrix, diag=T)] = NA
> redundant = colSums(subset.matrix, na.rm=T) >= 1
rules <- lul
rules.sorted <- sort(rules, by ="lift")
rules.sorted <- sort(rules, by ="confidence")
summary(rules)
rules <- apriori(tr, parameter = list(supp=0.005, conf=0.9))
rules <- sort(rules, by='confidence', decreasing = TRUE)
rules <- sort(rules, by='confidence')
quality(rules)$lift <- interestMeasure(itemsets, measure="lift", tr)
quality(rules)$lift <- interestMeasure(itemsets, measure="lift", ola)
quality(rules)$lift <- interestMeasure(rules, measure="lift", tr)
rules.sorted = sort(rules, by="lift")
subset.matrix = is.subset(rules.sorted, rules.sorted)
subset.matrix[lower.tri(subset.matrix, diag=T)] = NA
subset.matrix[lower.tri(subset.matrix, diag=T)] = NA
subset.matrix[lower.tri(subset.matrix, diag=T)] = NA
subset.matrix[lower.tri(subset.matrix, diag=T)] = FALSE
redundant = colSums(subset.matrix, na.rm=T) >= 1
rules.pruned = rules.sorted[!redundant]
summary(rules.pruned)
inspect(rules)
inspect(rules.pruned)
?aggregate
?transform
View(itemlist)
View(itemList)
?ddply
lul <- itemList
?transform
?ddply
?separate
names(itemlist)
names(itemList)
retail <- read_excel('Online retail.xlsx')
retail <- retail[complete.cases(retail), ]
retail <- retail %>% mutate(Description = as.factor(Description))
retail <- retail %>% mutate(Country = as.factor(Country))
retail$Date <- as.Date(retail$InvoiceDate)
retail$Time <- format(retail$InvoiceDate,"%H:%M:%S")
retail$InvoiceNo <- as.numeric(as.character(retail$InvoiceNo))
retail <- read_excel('Online retail.xlsx')
retail <- retail[complete.cases(retail), ]
retail <- retail %>% mutate(Description = as.factor(Description))
retail <- retail %>% mutate(Country = as.factor(Country))
retail$Date <- as.Date(retail$InvoiceDate)
retail$Time <- format(retail$InvoiceDate,"%H:%M:%S")
retail$Time <- as.factor(retail$Time)
a <- hms(as.character(retail$Time))
retail$Time = hour(a)
retail %>%
View(retail)
retail %>%
mutate(Description = fct_recode(Description,))
retail <- select(retail, c("InvoiceNo", "Description"))
View(retail)
write.csv(retail, "att.csv", quote = FALSE)
herb <- read_csv("herb.csv")
View(herb)
unique(herb$`HERB MARKER MINT`)
rm(herb)
retail <- retail %>%
mutate(Description = fct_recode(Description,
"HERB MARKER" = "HERB MARKER ROSEMARY",
"HERB MARKER" = "HERB MARKER BASIL",
"HERB MARKER" = "HERB MARKER CHIVES",
"HERB MARKER" = "HERB MARKER PARSLEY",
"HERB MARKER" = "HERB MARKER THYME",
"HERB MARKER" = "HERB MARKER MINT"))
library(tidyverse)
library(forcats)
retail <- retail %>%
mutate(Description = fct_recode(Description,
"HERB MARKER" = "HERB MARKER ROSEMARY",
"HERB MARKER" = "HERB MARKER BASIL",
"HERB MARKER" = "HERB MARKER CHIVES",
"HERB MARKER" = "HERB MARKER PARSLEY",
"HERB MARKER" = "HERB MARKER THYME",
"HERB MARKER" = "HERB MARKER MINT"))
View(retail)
lul <- itemList
back <- itemList
itemList <- ddply(retail,c("InvoiceNo"),
function(df1)paste(df1$Description,
collapse = ","))
library(plyr)
itemList <- ddply(retail,c("InvoiceNo"),
function(df1)paste(df1$Description,
collapse = ","))
View(itemList)
View(itemList)
itemList <- select(itemList, -InvoiceNo)
View(itemList)
colnames(itemList) <- c("items")
write.csv(itemList,"market_basket.csv", quote = FALSE, row.names = TRUE)
tr <- read.transactions('market_basket.csv', format = 'basket', sep=',')
summary(tr)
write.csv(itemList,"market_basket.csv", quote = FALSE, row.names = FALSE)
tr <- read.transactions('market_basket.csv', format = 'basket', sep=',')
summary(tr)
itemFrequencyPlot(tr, topN=20, type='absolute')
att <- apriori(tr, parameter = list(supp = 0.005, conf = 0.9))
att <- sort(att, by="confidence")
summary(att)
att
inspect(att)
plot(rules)
plot(att)
index <- which(is.redundant(rules))
index
index <- which(is.redundant(att))
index
att.nored <- att[-index,]
att.nored
inspect(att.nored)
summary(att.nored)
plot(att.nored)
save.image("~/Desktop/Faculdade/MineracaoDados/TP1/Data-Analysis-with-R/históricoTP1Final.RData")
savehistory("~/Desktop/Faculdade/MineracaoDados/TP1/Data-Analysis-with-R/historicoTP1Final.Rhistory")
